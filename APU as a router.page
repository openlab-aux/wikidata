## Installation

### System

Install a regular Debian amd64.

Note:
- Make sure you always restart/reload a service after you have changed its
config files. Alternatively, follow this howto and do a clean boot at the very
end.

- All commands in this howto need to be executed by root (or via sudo).

### Boot Loader

The APU doesn't come with a VGA or HDMI output, so for emergency debugging we
want to enable the serial console.

Edit `/etc/default/grub` and add/change the following values:

```
GRUB_CMDLINE_LINUX_DEFAULT="verbose console=ttyS0,115200n8 reboot=bios"
GRUB_SERIAL_COMMAND="serial --unit=0 --speed=115200"
GRUB_TERMINAL=serial
```

Now we'll have to write grub to the MBR again:

```
update-grub
```

We'll also add a system service that provides a tty over the serial port.
Create `/etc/init/ttyS0.conf` and write the following to it:

```
# ttyS0 - getty

start on stopped rc RUNLEVEL=[2345]
stop on runlevel [!2345]

respawn
exec /sbin/getty -8 115200 -L ttyS0
```

Once you reboot the system you should now be able to watch it boot via the serial
console and login once it's done.

### Basic packages

Let's install a bunch of common and useful packages:

```
apt install apt-transport-https curl htop net-tools nmap tmux unzip
```

## Configuration

### sudo

Add the user `openlab` to the `sudo` group. Edit `/etc/sudoers` and let users
in this group run sudo without password verification:

```
%sudo   ALL=(ALL:ALL) NOPASSWD: ALL
```

Everyone with access to this system will have to add their pub-key to `/home/openlab/.ssh/authorized_keys`.

### Network

The APU has three ethernet interfaces (from left to right: `enp1s0`, `enp2s0` and `enp3s0`).

- `enp1s0` will be physically connected to the LAN
- `enp2s0.25` (VLAN 25) will be physically connected to the Ubiquiti radio-link to [gamambel](Mensch_mo)
- `enp3s0` is for debugging purposes only and requests an IP via DHCP

Edit `/etc/network/interfaces` and add these interfaces:

```
# Local lab network
auto enp1s0
iface enp1s0 inet static
        address 172.16.0.1
        netmask 255.255.0.0

# Link to gamambel
auto enp2s0.25
iface enp2s0.25 inet static
        address 10.11.69.196
        netmask 255.255.255.192

        up route add -host 5.254.89.173 gw 10.11.69.193

# Debugging network
auto enp3s0
iface enp3s0 inet dhcp
```

The static host route is the only route available on startup. It allows us to
connect to a VPN server with openvpn, which in turn sets up our default route
to the Internet. See the next paragraph.

### VPN connection

We don't want to connect to the Internet via our ISP directly, so we will setup a VPN connection, which
all traffic will be routed through.

Install `openvpn`:

```
apt install openvpn ca-certificates
```

Copy the VPN configuration to `/etc/openvpn/labvpn.conf`. Now edit `/etc/default/openvpn`:

```
AUTOSTART="labvpn"
```

### Firewall 

We want to forward packages between ethernet interfaces, but only allow incoming
connections on specific ports. All outgoing traffic is allowed to pass through.

Install `ufw`:

```
apt install ufw
ufw enable
ufw default deny incoming
ufw default allow outgoing
ufw default allow forward
ufw allow ssh
```

Add NAT/masquerading to the top of `/etc/ufw/before.rules`:

```
# NAT over tun0
*nat
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -s 172.16.0.0/16 -o tun0 -j MASQUERADE

COMMIT
```

Enable IPv4 forwarding by editing `/etc/ufw/sysctl.conf`:

```
net/ipv4/ip_forward=1
```

### DHCP server

LAN-guests will receive a dynamically allocated IP address, within the range of
172.16.0.100 through 172.16.0.249, via DHCP.

Install `isc-dhcp-server`:

```
apt install isc-dhcp-server
systemctl enable isc-dhcp-server
```

Edit `/etc/default/isc-dhcp-server` and configure the interfaces:

```
INTERFACESv4="enp1s0"
```

Edit `/etc/dhcp/dhcpd.conf` for all other settings:

```
#option domain-name;
#option domain-name-servers;

default-lease-time 14400;
max-lease-time 86400;

authoritative;

subnet 172.16.0.0 netmask 255.255.0.0 {
        range 172.16.0.100 172.16.0.249;
        option routers 172.16.0.1;
        option domain-name "lab";
        option domain-name-servers 172.16.0.1, 8.8.8.8, 8.4.4.8;
}
```

Download `http://standards.ieee.org/regauth/oui/oui.txt` to
`/usr/local/etc/oui.txt` to enable MAC => manufacturer resolving.

### DNS server

We run a DNS server so local OpenLab services can be resolved by name.

Install `dnsmasq`:

```
apt install dnsmasq
ufw allow dns
```

Edit `/etc/dnsmasq.conf` and change the following values:

```
domain-needed
bogus-priv

interface=enp1s0
```

Add all machines with a static IP to `/etc/hosts`, as `dnsmasq` will parse this
file for DNS requests.

### Prometheus

Install `prometheus`:

```
apt install prometheus prometheus-node-exporter
systemctl enable prometheus-node-exporter
systemctl enable prometheus
```

Edit `/etc/prometheus/prometheus.yml` and change the following values:

```
  external_labels:
    monitor: 'lab'
    
...

  - job_name: 'lab'
    
    scrape_interval: 10s
    scrape_timeout: 10s

    static_configs:
      - targets: ['localhost:9100']

  # -job_name: node
  #   static_configs:
  #     - targets: ['localhost:9100']   
```

Next we'll install `grafana` as a frontend for prometheus. Since it's not in the
official repos yet, we'll add a new APT source. Edit `/etc/apt/sources.list' and
add:

```
deb https://packagecloud.io/grafana/stable/debian/ stretch main
```

Now we can install the package:

```
curl https://packagecloud.io/gpg.key | sudo apt-key add -
apt update
apt install grafana
systemctl enable grafana-server
ufw allow 3000
```

### Traffic shaping

Install `tc` (part of `iproute2`):

```
apt install iproute2
```

Create a new bash script called `/usr/local/bin/tcsetup.sh` with the following content:

```
#!/bin/sh
tc qdisc add dev enp1s0 root handle 1: htb default 5

# define classes
tc class add dev enp1s0 parent 1: classid 1:1 htb rate 50mbit ceil 50mbit
tc class add dev enp1s0 parent 1:1 classid 1:5 htb rate 4mbit ceil 40mbit
tc class add dev enp1s0 parent 1:1 classid 1:6 htb rate 512kbit ceil 4mbit

# prefer SSH
tc filter add dev enp1s0 protocol ip parent 1:0 prio 0 u32 match ip sport 22 0xffff flowid 1:5
tc filter add dev enp1s0 protocol ip parent 1:0 prio 0 u32 match ip dport 22 0xffff flowid 1:5

# de-prioritize external guests
tc filter add dev enp1s0 protocol ip parent 1:0 prio 5 u32 match ip src 172.16.1.0/24 flowid 1:6
```

Now make the script executable:

```
chmod +x /usr/local/bin/tcsetup.sh
```

### SNMP

To be done.

### Backup

To be done.
